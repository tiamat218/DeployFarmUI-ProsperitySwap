{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/InfoCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useTotalSupply","totalSupply","setTotalSupply","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","ethereum","res","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","ethhPrice","usePriceBnbBusd","times","circSupply","minus","cakeSupply","cakePrice","marketCap","cakeePrice","tokenPerSecond","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","InfoCard","href","as","variant","target","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/15.df6a8ee8.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/GM-masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingToken',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix, color }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} color={color}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalTokenSupply = (tokenAddress: string) => {\r\n  const { fastRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState <BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, tokenAddress)\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [tokenAddress, fastRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\n\r\nexport const useTokenContractBalance = (tokenAddress: string, contractAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, tokenAddress)\r\n      const bal = await cakeContract.methods.balanceOf(contractAddress).call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, contractAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { fastRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [fastRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useLpBalance = (tokenAddress: string, LpAddress: string) => {\r\n  const [balance, setBalance] = useState<BigNumber>()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getContract(cakeABI, tokenAddress)\r\n      const res = await contract.methods.balanceOf(LpAddress)\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, LpAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, tokenAddress)\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/GM-masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingToken',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  // background-image: url('/images/egg/2f.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n  min-height: 50px;\r\n  border: 1px solid rgba(15, 150, 242, 0.34);\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n \r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color='secondary' size=\"xl\" mb=\"24px\">\r\n          DASHBOARD\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2h.png\" alt=\"logo\" width={80} height={80} />\r\n        \r\n        <Block>\r\n          <Label> GMT in Wallet </Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(5)}</Label>\r\n        </Block>\r\n\r\n         <Block>\r\n          <Label> GMT to collect </Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(3)}</Label>\r\n        </Block> \r\n\r\n\r\n\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? \"Collecting earnings ...\"\r\n                : \"Harves all Farms\"}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n          \r\n   {/*        <Text fontSize=\"14px\" color=\"#fcca03\"> {TranslateString(999, '(Harvest arrives only after locking time!)')}</Text> \r\n */}\r\n        </Actions>\r\n\r\n      \r\n\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Image, Card, CardBody, Heading, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd, usePriceBnbBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border: 1px solid rgba(15, 150, 242, 0.34);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n\r\n  const totalSupply = useTotalSupply();\r\n  const burnedBalance = useBurnedBalance(getCakeAddress());\r\n  const farms = useFarms();\r\n\r\n  const ethPrice = usePriceBnbBusd();\r\n  const ethhPrice = ethPrice.times(1).toFixed(2);\r\n\r\n  \r\n\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n\r\n  const cakePrice = usePriceCakeBusd();\r\n\r\n  const marketCap = cakePrice.times(circSupply);\r\n  \r\n  const cakeePrice = cakePrice.times(1).toFixed(8);\r\n\r\n\r\n\r\n\r\n  let tokenPerSecond = 0;\r\n  if(farms && farms[0] && farms[0].tokenPerSecond){\r\n    tokenPerSecond = new BigNumber(farms[0].tokenPerSecond).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading color='secondary' size=\"xl\" mb=\"24px\">\r\n          Project/Token Stats\r\n        </Heading>\r\n\r\n\r\n\r\n\r\n        <Row>\r\n          <Text fontSize=\"14px\">Market Cap</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" color=\"textSubtle\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Total Minted</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} color=\"textSubtle\" />}\r\n        </Row>\r\n{/* \r\n        <Row>\r\n          <Text fontSize=\"14px\" color=\"#757245\">{TranslateString(999, 'Max Adamant Transfer')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(maxTrans)} decimals={0} color=\"#757245\" />\r\n        </Row>\r\n*/}\r\n        <Row>\r\n          <Text fontSize=\"14px\" color=\"#cc1212\">Total Burned</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} color=\"#cc1212\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">Circulating Supply</Text>\r\n          <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} color=\"textSubtle\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">New Token/Second</Text>\r\n          <Text bold fontSize=\"14px\" color=\"textSubtle\">{tokenPerSecond}</Text>\r\n        </Row> \r\n        \r\n{/* \r\n\r\n        <Button\r\n                           as=\"a\"\r\n                           variant=\"primary\"\r\n                           fullWidth\r\n                           href=\"/presale\"\r\n                           target=\"_blank\" >\r\n                           {TranslateString(0, 'Buy GMT in Pre-Sale >')}\r\n        </Button>\r\n\r\n       \r\n\r\n       <Text fontSize=\"14px\" color=\"#cc1212\"> RugDoc ADAMANT Review:</Text>\r\n        \r\n       \r\n        <a target=\"blank\" href='https://rugdoc.io/project/eternity-money-adamant/'> <Image src=\"./images/rugdoc1.png\" width={340} height={110} alt=\"rudgroc review\" /> </a>\r\n */}\r\n        <br/>\r\n        <Row>\r\n          <Text fontSize=\"12px\"> Current Token Price </Text>\r\n          <Text fontSize=\"12px\"  >$ {cakeePrice}</Text>\r\n        </Row>   \r\n\r\n        <br/>\r\n        <Row>\r\n          <Text fontSize=\"12px\"> Current ETH Price </Text>\r\n          <Text fontSize=\"12px\"  >$ {ethhPrice}</Text>\r\n        </Row>   \r\n\r\n \r\n\r\n \r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  border: 1px solid rgba(15, 150, 242, 0.34);\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  \r\n  const totalValue = useTotalValue();\r\n  const totalSupply = useTotalSupply();\r\n  const burnedBalance = useBurnedBalance(getCakeAddress());\r\n\r\n  \r\n\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n\r\n<>\r\n<br/>\r\n      <Row>\r\n          <Text fontSize=\"14px\"> Total GMT Created </Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={2} />}\r\n        </Row>\r\n\r\n      <Row>\r\n          <Text fontSize=\"14px\" color=\"#cc1212\"> Total GMT Burned </Text>\r\n          <CardValue fontSize=\"14px\" color=\"#cc1212\" value={getBalanceNumber(burnedBalance)} decimals={2} />\r\n        </Row>\r\n\r\n        <Row>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\"> Circulating Supply </Text>\r\n          <CardValue fontSize=\"14px\" color=\"textSubtle\" value={getBalanceNumber(circSupply)} decimals={2} />\r\n        </Row>\r\n</>\r\n        <br/>\r\n        <br/>\r\n\r\n        <Heading color='secondary' size=\"lg\" mb=\"24px\">\r\n          Total Value in Farms\r\n        </Heading>\r\n\r\n               \r\n          <CardValue value={totalValue.toNumber()} decimals={0} prefix=\"$ \"/>          \r\n         \r\n        <br/>\r\n        <br/>\r\n\r\n        <Heading color='secondary' size=\"lg\" mb=\"24px\">\r\n          Total Value in Blast Liquidity Pools\r\n        </Heading>\r\n\r\n            {/* TODO: value of all LPs... */}\r\n          <CardValue value={totalValue.toNumber()} decimals={0} prefix=\"$ \"/>          \r\n         \r\n        <br/>\r\n        <br/>\r\n\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border: 1px solid rgba(15, 150, 242, 0.34);\r\n`\r\n\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading color='secondary' size=\"xl\" mb=\"24px\">\r\n          ANNOUNCEMENTS\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'GlobalMoney2024'\r\n          }}\r\n          options={{\r\n            height: '350',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Button, Text, Image } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useTotalValue } from '../../../state/hooks'\r\n\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  border: 1px solid rgba(15, 150, 242, 0.34);\r\n`\r\n\r\nconst InfoCard = () => {\r\n  const TranslateString = useI18n()\r\n  const totalValue = useTotalValue()\r\n \r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading color='secondary' size=\"lg\" mb=\"10px\">\r\n          INFO\r\n        </Heading>         \r\n        \r\n        <Text fontSize=\"16px\" color=\"secondary\">Global Money Token: </Text>\r\n        <a href='https://blastscan.io/token/0xb60df4a1db61b173d0d774ffa813c3c37070e38b#code'> <Text fontSize=\"14px\" color=\"white\">  0xb60df4a1db61b173d0d774ffa813c3c37070e38b </Text> </a>\r\n        <Text fontSize=\"14px\" color=\"bfbf00\"> Initial Supply: 10,100 Token </Text>\r\n        <Text fontSize=\"14px\" color=\"bfbf00\"> 99% to Liquidity! </Text>\r\n        <br/>\r\n        <Text fontSize=\"16px\" color=\"secondary\">Global Money Masterchef: </Text>\r\n        <a href='https://blastscan.io/address/0x7133336A8340886F13ff35ED432F3490b4ee29DF#code'> <Text fontSize=\"14px\" color=\"white\">  0x7133336A8340886F13ff35ED432F3490b4ee29DF </Text> </a>\r\n        <Text fontSize=\"14px\" color=\"bfbf00\"> Emission Rate: 10 Token/Day </Text>\r\n        <br/>\r\n        <Text fontSize=\"16px\" color=\"secondary\">Global Money DEX: </Text>\r\n        <Text fontSize=\"16px\" color=\"secondary\"> - Swap Router: </Text>\r\n        <a href='https://blastscan.io/address/0x8e481ef1ae0dffc9a82dde2c24c27d1f190a04d0#code'> <Text fontSize=\"14px\" color=\"white\">  0x8e481ef1ae0dffc9a82dde2c24c27d1f190a04d0 </Text> </a>\r\n        <Text fontSize=\"16px\" color=\"secondary\"> - Factory: </Text>\r\n        <a href='https://blastscan.io/address/0x88ABe497B8C45aF95090e5F27CF302849D2c9333#code'> <Text fontSize=\"14px\" color=\"white\">  0x88ABe497B8C45aF95090e5F27CF302849D2c9333 </Text> </a>\r\n        <br/>\r\n        <Text fontSize=\"16px\" color=\"bfbf00\"> Constanty lowest swap fees of 0,09%! </Text>\r\n\r\n\r\n        <br/>\r\n\r\n        <a href='todo whitepaper link'> <Text fontSize=\"14px\" color=\"white\" > ----- </Text> </a>\r\n\r\n          <Button \r\n              as=\"a\"             \r\n              variant=\"tertiary\"\r\n              href=\"todo whitepaper link\"\r\n              target=\"_blank\" >\r\n              Whitepaper\r\n          </Button>\r\n\r\n\r\n\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default InfoCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout, Button, BackgroundImage } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\n\r\n\r\n\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport FarmStakingCard1 from './components/FarmStakingCard1'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport InfoCard from './components/InfoCard'\r\n\r\n// import Timer from './components/Timer'\r\n\r\nimport TimerCard from './components/TimerCard'\r\n\r\n\r\n\r\nconst Hero = styled.div`  // mobile verision\r\n  align-items: center;\r\n  background-image: url('/images/egg/3b.png');\r\n  background-repeat: no-repeat;\r\n\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-top: -160px;\r\n  margin-bottom: -25px;\r\n  height: 325px;\r\n  padding-top: 1px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {  // desktop version\r\n    background-image: url('/images/egg/3b.png');\r\n    background-size: cover;\r\n    background-position: center;\r\n    \r\n    \r\n    margin-top: -100px;\r\n    margin-bottom: -50px;\r\n    height: 500px;\r\n    \r\n    padding-top: 1;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n\r\n\r\n\r\n    <Page>\r\n\r\n\r\n\r\n    \r\n<br/>\r\n      <Hero>\r\n      <br/>\r\n      </Hero>\r\n\r\n      <Button \r\n              as=\"a\"\r\n              variant=\"primary\"\r\n              href=\"\"\r\n              target=\"_blank\" >\r\n              Get GMT\r\n        </Button>\r\n\r\n        <br/><br/>\r\n\r\n        <Heading as=\"h2\"  color='#bdbdbd'> Advanced Sustainable Earning Technology </Heading>\r\n        <Heading as=\"h2\"  color='#bdbdbd' mb=\"12px\"> Blast Yield + Transaction fees for BuyBack! </Heading>\r\n        \r\n\r\n    \r\n\r\n      <div>\r\n\r\n\r\n        <Cards>\r\n          <FarmStakingCard />\r\n        {/*   <FarmStakingCard1 />\r\n\r\n\r\n          <TimerCard /> */}\r\n\r\n          <TwitterCard/>\r\n\r\n          <CakeStats />\r\n\r\n          <InfoCard/>         \r\n\r\n          <TotalValueLockedCard />\r\n\r\n        </Cards>\r\n        \r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}