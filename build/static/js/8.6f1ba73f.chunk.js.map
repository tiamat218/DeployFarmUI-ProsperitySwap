{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Tags.tsx","hooks/useStake.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","utils/erc20.ts","config/index.ts","components/layout/Flex.tsx","hooks/useApprove.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useUnstake.ts","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useSousStake","sousId","isUsingBnb","dispatch","useDispatch","useWallet","account","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","a","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","txHash","fetchFarmUserDataAsync","console","info","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","useApprove","lpContract","onApprove","approve","tx","useSousApprove","updateUserAllowance","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","chainId","secondPart","StyledLinkExternal","LinkExternal","textSubtle","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","process","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useUnstake","onUnstake","unstake","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","borderColor","earnings","canHarvest","nextHarvestTimeStamp","onReward","useHarvest","rawEarningsBalance","harvestingLockApplicable","gt","timeadjustment","toNumber","harvestLabel","Date","harvestLocked","now","marginBottom","textTransform","pr","fontSize","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","harvestTimeStamp","cackePrice","usePriceCakeBusd","usdValue","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","toFixed","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","farmsProps","path","farmsLP","useFarms","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","tokenPerSecond","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/8.6f1ba73f.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1) // TODO  ganze calc läuft auf token per second, also rausfinden wie wir das umbauen ...\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000) // TODO\r\nexport const BSC_BLOCK_TIME = 3  // TODO\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\n\r\nimport { useMasterchef, useCake, useSousChef, useBUSD } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID // TODO\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId] // TODO\r\n  const secondPart = tokenAddresses[chainId]  // TODO\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://pancakeswap.finance/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}` // TODO\r\n            :\r\n          `https://pancakeswap.finance/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text color=\"textSubtle\">{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(999, 'View on BlastScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\n\r\n\r\nexport default useUnstake\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\n\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading,Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number,\r\n  account?: string,\r\n  canHarvest? : number,\r\n  nextHarvestTimeStamp? : BigNumber\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  display: flex;\r\n  height: 5px;\r\n  margin: 10px auto;\r\n  width: 100%;\r\n`\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, account, canHarvest, nextHarvestTimeStamp }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n \r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n  const harvestingLockApplicable  = canHarvest >= 0 && nextHarvestTimeStamp.gt(0);\r\n  const timeadjustment = harvestingLockApplicable ? nextHarvestTimeStamp.toNumber() *1000 : 0 ;\r\n  const harvestLabel = harvestingLockApplicable ? `Locked till: ${new Date(timeadjustment).toLocaleString()} `: '';\r\n  const  harvestLocked = harvestingLockApplicable ? Date.now() < timeadjustment : false;\r\n  // debugger; // eslint-disable-line no-debugger\r\n  \r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 99 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        \r\n        <Button\r\n          disabled={(rawEarningsBalance === 0  || (pendingTx|| harvestLocked))  }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          { harvestLocked ?\r\n            TranslateString(999, 'Harvest Locked')\r\n          : TranslateString(999, 'Harvest')\r\n        }\r\n        </Button>\r\n        \r\n        {(harvestingLockApplicable || rawEarningsBalance > 0) ?\r\n        \r\n        <Flex  justifyContent='space-between'>\r\n        \r\n        <Text bold textTransform=\"capitalize\"  color={rawEarningsBalance === 0 ? 'textDisabled' :'textSubtle'} pr=\"0px\" fontSize=\"12px\">\r\n        {TranslateString(999,harvestLabel)}  \r\n        </Text> \r\n        \r\n      </Flex>\r\n       : null }\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types' \r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport { usePriceCakeBusd } from '../../../../state/hooks'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings, harvestTimeStamp, canHarvest } = useFarmUser(pid)\r\n  const cackePrice = usePriceCakeBusd();\r\n  const usdValue = earnings.times(cackePrice)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID] // TODO\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]; // TODO\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          GMT\r\n        </Text>\r\n\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} \r\n        canHarvest={canHarvest} nextHarvestTimeStamp={harvestTimeStamp} />\r\n      <Flex>\r\n\r\n\r\n      <Text  color=\"secondary\" fontSize=\"12px\">\r\n             ~ {getBalanceNumber(usdValue).toFixed(5)} USD\r\n      </Text>  \r\n\r\n      </Flex>\r\n      <br />\r\n      <Flex>\r\n\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'GMT PER $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://pancakeswap.finance/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'GMT'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'GMT' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }} color=\"textSubtle\">\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold color=\"textSubtle\">{earnLabel}</Text>\r\n      </Flex>\r\n\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }} color=\"textSubtle\">{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n\r\n\r\n\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}` // TODO\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}` // TODO\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd() \r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.tokenPerSecond || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"15px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(999, 'Stake Tokens to earn GMT')\r\n            :\r\n          TranslateString(999, 'Stake LP Tokens to earn GMT')\r\n        }\r\n      </Heading>  \r\n\r\n\r\n      <Heading as=\"h2\" color=\"#bdbdbd\" mb=\"12px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(0, 'ETH/wETH/USDB-Yield, Transactionfee-Cash-Back')}\r\n        </Heading> \r\n       \r\n      <Heading as=\"h2\" color=\"#bdbdbd\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(0, '100% for GMT BUYBACK!')}\r\n      </Heading> \r\n    \r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}